package pl.tau.restdemo.service;

import org.springframework.stereotype.Component;
import pl.tau.restdemo.domain.Person;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/**
 * Created by tp on 24.04.17.
 */
@Component
public class PersonManagerImpl implements  PersonManager {

    private Connection connection;

//    private String url = "jdbc:hsqldb:hsql://localhost/workdb";
    private String url = "jdbc:hsqldb:hsql://localhost";


    private PreparedStatement addPersonStatement;
    private PreparedStatement deletePersonStatement;
    private PreparedStatement getAllPersonsStatement;
    private PreparedStatement getPersonByIdStatement;


    public PersonManagerImpl() throws SQLException {
        Statement statement;
        connection = DriverManager.getConnection(url);
        statement = connection.createStatement();

        ResultSet rs = connection.getMetaData()
                                 .getTables(null,
                                         null,
                                         null,
                                         null);
        boolean tableExists = false;
        while (rs.next()) {
            if ("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists)
            statement.executeUpdate
            ("CREATE TABLE Person(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
                    "name varchar(20), yob integer)");

        addPersonStatement = connection
                .prepareStatement("INSERT INTO Person (name, yob) VALUES (?, ?)");
        deletePersonStatement = connection
                .prepareStatement("DELETE FROM Person WHERE id = ?");
        getAllPersonsStatement = connection
                .prepareStatement("SELECT id, name, yob FROM Person");
        getPersonByIdStatement = connection
                .prepareStatement( "SELECT id, name, yob FROM Person WHERE id = ?");
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    @Override
    public void deletePerson(int id) {
        try {

            deletePersonStatement.setInt(1, id);
            deletePersonStatement.executeUpdate();
            System.out.println("Deleted person for id: " + id);

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void clearPersons() throws SQLException {
        connection.prepareStatement("delete from Person").executeUpdate();
    }

    @Override
    public int addPerson(Person person) {
        System.out.println("Name: " + person.getName() + " YOB: " + person.getYob());
        int count = 0;
        try {
            addPersonStatement.setString(1, person.getName());
            addPersonStatement.setInt(2, person.getYob());

            count = addPersonStatement.executeUpdate();

        } catch (SQLException e) {
            e.printStackTrace();
        }
        return count;
    }

    @Override
    public Person getPerson(int id) {
        System.out.println("Get person for id: " + id);

        Person person = null;
        try {
            getPersonByIdStatement.setInt( 1, id );
            ResultSet rs = getPersonByIdStatement.executeQuery();
            if (rs.next()) {
                System.out.println("Result found");
                person = new Person();
                person.setId( rs.getInt( "id" ) );
                person.setName( rs.getString( "name" ) );
                person.setYob( rs.getInt( "yob" ) );
            }
        } catch ( SQLException e ) {
            e.printStackTrace();
        }
        return person;
    }

    public List<Person> getAllPersons() {
        List<Person> persons = new ArrayList<Person>();

        try {
            ResultSet rs = getAllPersonsStatement.executeQuery();

            while (rs.next()) {
                Person p = new Person();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setYob(rs.getInt("yob"));
                persons.add(p);
                System.out.println("Got Name: " + p.getName() + " YOB: " + p.getYob());
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }
        System.out.println("Read count: " + persons.size());
        return persons;
    }

}
